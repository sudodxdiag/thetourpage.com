! function(t) {
    "use strict";
    var e = {};

    function i() {
        (function() {
            var e = t(".mkdf-tours-filter-holder.mkdf-tours-filter-horizontal form");
            return {
                fieldsHelper: {
                    init: function() {
                        ! function() {
                            var t = "undefined" != typeof mkdfToursSearchData ? mkdfToursSearchData.destinations : [],
                                t = new Bloodhound({
                                    datumTokenizer: Bloodhound.tokenizers.whitespace,
                                    queryTokenizer: Bloodhound.tokenizers.whitespace,
                                    local: t
                                });
                            e.find(".mkdf-tours-destination-search").typeahead({
                                hint: !0,
                                highlight: !0,
                                minLength: 1
                            }, {
                                name: "destinations",
                                source: t
                            })
                        }()
                    }
                }
            }
        })().fieldsHelper.init()
    }

    function n() {}

    function o() {}

    function r() {}
    "undefined" != typeof mkdf && (mkdf.modules.destinations = e), e.mkdfOnDocumentReady = i, e.mkdfOnWindowLoad = n, e.mkdfOnWindowResize = o, e.mkdfOnWindowScroll = r, t(document).ready(i), t(window).on("load", n), t(window).resize(o), t(window).scroll(r)
}(jQuery),
function(l) {
    "use strict";
    var t = {};

    function e() {
        a(), "undefined" != typeof mkdf && d(), r(), l(".mkdf-tour-item-single-holder").find(".mkdf-tour-tabs.mkdf-horizontal ul li a").on("click", function(t) {
                t.preventDefault();
                var e = l(this),
                    i = e.attr("href");
                "tour-item-gallery-id" === i && r()
            }), f().fieldsHelper.init(), f().handleSearch.init(),
            function() {
                var t = l(".mkdf-tours-masonry-item");
                t.length && t.each(function() {
                    var t = l(this),
                        e = t.find(".mkdf-tours-gim-content-holder"),
                        i = e.find(".mkdf-tours-gim-excerpt"),
                        n = e.find(".mkdf-tours-gim-main-info"),
                        o = Math.ceil(i.height() + parseInt(i.css("margin-top")));
                    n.css("margin-bottom", "-" + o + "px")
                })
            }()
    }

    function i() {
        m()
    }

    function n() {
        r()
    }

    function o() {}

    function r() {
        var t = l(".mkdf-tour-masonry-gallery-holder .mkdf-tour-masonry-gallery");
        t.length && t.each(function() {
            var t = l(this);
            ! function(t, e) {
                if (e.hasClass("mkdf-tours-gallery-images-fixed")) {
                    var i = parseInt(e.find(".mkdf-tour-gallery-item").css("padding-left")),
                        n = e.find(".mkdf-tgi-masonry-default"),
                        o = e.find(".mkdf-tgi-masonry-large-width"),
                        r = e.find(".mkdf-tgi-masonry-large-height"),
                        a = e.find(".mkdf-tgi-masonry-large-width-height");
                    680 < mkdf.windowWidth ? (n.css("height", t - 2 * i), r.css("height", Math.round(2 * t) - 2 * i), a.css("height", Math.round(2 * t) - 2 * i)) : (n.css("height", t - 2 * i), r.css("height", Math.round(2 * t) - 2 * i), a.css("height", t - 2 * i)), o.css("height", t - 2 * i)
                }
            }(t.find(".mkdf-tour-grid-sizer").width(), t), t.waitForImages(function() {
                t.isotope({
                    layoutMode: "packery",
                    itemSelector: ".mkdf-tour-gallery-item",
                    percentPosition: !0,
                    packery: {
                        gutter: ".mkdf-tour-grid-gutter",
                        columnWidth: ".mkdf-tour-grid-sizer"
                    }
                }), t.css("opacity", "1")
            })
        })
    }

    function a() {
        var t = l(".mkdf-tour-item-single-holder"),
            n = t.find(".mkdf-tour-tabs.mkdf-horizontal ul li a"),
            o = t.find(".mkdf-tour-item-section");
        n.first().addClass("mkdf-active-item"), n.on("click", function(t) {
            t.preventDefault(), n.removeClass("mkdf-active-item");
            var e = l(this),
                i = e.attr("href");
            e.addClass("mkdf-active-item"), o.length && o.each(function() {
                var t = l(this);
                t.attr("id") === i ? (t.show(), "tour-item-location-id" === i && s()) : t.hide()
            })
        })
    }

    function d() {
        l(".mkdf-tour-item-single-holder").find(".mkdf-tour-tabs.mkdf-horizontal ul li a").on("click", function(t) {
            t.preventDefault(), "tour-item-location-id" === l(this).attr("href") && s()
        })
    }

    function s() {
        "undefined" != typeof mkdf && mkdf.modules.googleMap.mkdfShowGoogleMap()
    }

    function f() {
        var r = l(".mkdf-tours-search-main-filters-holder form");
        return {
            fieldsHelper: {
                init: function() {
                    ! function() {
                        var t = r.find(".mkdf-tours-range-input"),
                            d = r.find(".mkdf-tours-price-range-field"),
                            s = r.find('[name="min_price"]'),
                            f = r.find('[name="max_price"]'),
                            e = d.data("min-price"),
                            i = d.data("max-price"),
                            n = d.data("chosen-min-price"),
                            o = d.data("chosen-max-price");
                        t.length && t.each(function() {
                            noUiSlider.create(this, {
                                start: [n, o],
                                connect: !0,
                                step: 1,
                                range: {
                                    min: [e],
                                    max: [i]
                                },
                                format: {
                                    to: function(t) {
                                        return Math.floor(t)
                                    },
                                    from: function(t) {
                                        return t
                                    }
                                }
                            }).on("update", function(t) {
                                var e = t[0],
                                    i = t[1],
                                    n = d.data("currency-symbol"),
                                    o = d.data("currency-symbol-position"),
                                    r = "left" === o ? n + e : e + n,
                                    a = "left" === o ? n + i : e + i;
                                d.val(r + " - " + a), s.val(e), f.val(i)
                            })
                        })
                    }(),
                    function() {
                        var t = "undefined" != typeof mkdfToursSearchData ? mkdfToursSearchData.tours : [];
                        t = new Bloodhound({
                            datumTokenizer: Bloodhound.tokenizers.whitespace,
                            queryTokenizer: Bloodhound.tokenizers.whitespace,
                            local: t
                        }), r.find(".mkdf-tours-keyword-search").typeahead({
                            hint: !0,
                            highlight: !0,
                            minLength: 1
                        }, {
                            name: "tours",
                            source: t
                        })
                    }(),
                    function() {
                        var t = "undefined" != typeof mkdfToursSearchData ? mkdfToursSearchData.destinations : [];
                        t = new Bloodhound({
                            datumTokenizer: Bloodhound.tokenizers.whitespace,
                            queryTokenizer: Bloodhound.tokenizers.whitespace,
                            local: t
                        }), r.find(".mkdf-tours-destination-search").typeahead({
                            hint: !0,
                            highlight: !0,
                            minLength: 1
                        }, {
                            name: "destinations",
                            source: t
                        })
                    }(),
                    function() {
                        function e(t) {
                            "" === t.val() ? t.addClass("mkdf-tours-select-default-option") : t.removeClass("mkdf-tours-select-default-option")
                        }
                        var t = l(".mkdf-tours-select-placeholder");
                        t.length && t.each(function() {
                            var t = l(this);
                            t.select2({
                                minimumResultsForSearch: -1
                            }), e(l(this)), t.on("change", function() {
                                e(l(this))
                            })
                        })
                    }()
                }
            },
            handleSearch: function() {
                function s(t, e, i, n) {
                    var o = t.find('input[type="submit"]'),
                        r = l(".mkdf-tours-search-content"),
                        a = l(".mkdf-tours-search-page-holder"),
                        d = !1;
                    e = void 0 === e || e, i = void 0 === i || i, n = void 0 !== n && n;
                    var s = o.data("searching-label"),
                        f = o.val();
                    if (!d) {
                        e && o.val(s), i && t.find('[name="page"]').val(1), d = !0, r.addClass("mkdf-tours-searching");
                        var u = {
                            action: "tours_search_handle_form_submission"
                        };
                        u.fields = t.serialize(), l.ajax({
                            type: "GET",
                            url: mkdfToursAjaxURL,
                            dataType: "json",
                            data: u,
                            success: function(t) {
                                e && o.val(f), r.removeClass("mkdf-tours-searching"), d = !1, r.find(".mkdf-tours-row .mkdf-tours-row-inner-holder").html(t.html),
                                    function(t) {
                                        var e = "";
                                        location.href.match(/\?.*/) && document.referrer && (e = location.href.replace(/\?.*/, "")), window.history.replaceState({
                                            page: e + "?" + t
                                        }, "", e + "?" + t)
                                    }(t.url), l(".mkdf-tours-search-pagination").remove(), r.append(t.paginationHTML), n && l("html, body").animate({
                                        scrollTop: a.offset().top - 80
                                    }, 700), m()
                            }
                        })
                    }
                }
                return {
                    init: function() {
                        ! function(e) {
                            l("body").hasClass("post-type-archive-tour-item") && e.on("submit", function(t) {
                                t.preventDefault(), t.stopPropagation(), s(e)
                            })
                        }(r),
                        function(o) {
                            var r = l(".mkdf-search-ordering-item"),
                                a = o.find('[name="order_by"]'),
                                d = o.find('[name="order_type"]');
                            r.length && r.on("click", function(t) {
                                t.preventDefault(), t.stopPropagation();
                                var e = l(this);
                                r.removeClass("mkdf-search-ordering-item-active"), e.addClass("mkdf-search-ordering-item-active");
                                var i = e.data("order-by"),
                                    n = e.data("order-type");
                                void 0 !== i && void 0 !== n && (a.val(i), d.val(n)), s(o, !1, !1)
                            })
                        }(r),
                        function(n) {
                            var o = l(".mkdf-tours-search-view-item"),
                                r = n.find('[name="view_type"]');
                            o.length && o.on("click", function(t) {
                                t.preventDefault(), t.stopPropagation();
                                var e = l(this);
                                o.removeClass("mkdf-tours-search-view-item-active"), e.addClass("mkdf-tours-search-view-item-active");
                                var i = e.data("type");
                                void 0 !== i && r.val(i), s(n, !1, !1)
                            })
                        }(r),
                        function(i) {
                            var t = l(".mkdf-tours-search-pagination"),
                                n = i.find('[name="page"]');
                            t.length && l(document).on("click", ".mkdf-tours-search-pagination li", function(t) {
                                t.preventDefault(), t.stopPropagation();
                                var e = l(this).data("page");
                                void 0 !== e && n.val(e), s(i, !0, !1, !0)
                            })
                        }(r)
                    }
                }
            }()
        }
    }

    function m() {
        var t = l(".mkdf-tours-gallery-item");
        t.length && t.each(function() {
            var t = l(this).find(".mkdf-tours-gallery-item-content-holder"),
                e = t.find(".mkdf-tours-gallery-item-excerpt"),
                i = t.find(".mkdf-tours-gallery-main-info"),
                n = Math.ceil(e.height() + parseInt(e.css("margin-top")));
            i.css("margin-bottom", "-" + n + "px")
        }), t.addClass("mkdf-tours-gallery-item-showed")
    }
    "undefined" != typeof mkdf && (mkdf.modules.tours = t), t.mkdfOnDocumentReady = e, t.mkdfOnWindowLoad = i, t.mkdfOnWindowResize = n, t.mkdfOnWindowScroll = o, t.mkdfInitTourItemTabs = a, t.mkdfTourTabsMapTrigger = d, t.mkdfToursGalleryAnimation = m, l(document).ready(e), l(window).on("load", i), l(window).resize(n), l(window).scroll(o)
}(jQuery),
function(e) {
    "use strict";
    var t = {};

    function i() {
        o()
    }

    function n() {
        o()
    }

    function o() {
        var t = e(".mkdf-tours-destination-list.mkdf-destinations-masonry .mkdf-tours-row-inner-holder");
        ! function(t, e) {
            var i = parseInt(e.find(".mkdf-tours-destination-list-item").css("padding-left")),
                n = e.find(".mkdf-size-default"),
                o = e.find(".mkdf-size-large-width"),
                r = e.find(".mkdf-size-large-height"),
                a = e.find(".mkdf-size-large-width-height");
            680 < mkdf.windowWidth ? (n.css("height", t - 2 * i), r.css("height", Math.round(2 * t) - 2 * i), a.css("height", Math.round(2 * t) - 2 * i), o.css("height", t - 2 * i)) : (n.css("height", t - 2 * i), r.css("height", Math.round(2 * t) - 2 * i), a.css("height", t - 2 * i), o.css("height", Math.round(t / 2) - i))
        }(t.find(".mkdf-tours-list-grid-sizer").width(), t), t.waitForImages(function() {
            t.isotope({
                itemSelector: ".mkdf-tours-row-item",
                percentPosition: !0,
                hiddenStyle: {
                    opacity: 0
                },
                visibleStyle: {
                    opacity: 1
                },
                layoutMode: "packery",
                packery: {
                    gutter: ".mkdf-tours-list-grid-gutter",
                    columnWidth: ".mkdf-tours-list-grid-sizer"
                }
            }), t.css("opacity", "1")
        })
    }
    "undefined" != typeof mkdf && (mkdf.modules.destinationsListSC = t), t.mkdfOnWindowLoad = i, t.mkdfOnWindowResize = n, t.destinationsList = o, e(window).on("load", i), e(window).resize(n)
}(jQuery),
function(u) {
    "use strict";
    var t = {};

    function e() {
        i().init()
    }

    function l() {
        return "undefined" != typeof mkdf
    }

    function i() {
        function t(n) {
            var o, r, a, d = n.find(".mkdf-tours-list-pagination-data"),
                s = n.find(".mkdf-tours-list-holder-inner");
            o = n.find(".mkdf-tours-load-more-button"), r = n.find(".mkdf-tours-pagination-holder"), a = !1, o.length && o.on("click", function(t) {
                t.preventDefault(), t.stopPropagation();
                var e = o.data("loading-label"),
                    i = o.text();
                o.text(e),
                    function(t) {
                        var e = t.find(".mkdf-tour-list-filter-item");
                        e.removeClass("mkdf-tour-list-current-filter"), e.eq(0).addClass("mkdf-tour-list-current-filter"), t.find(".mkdf-tours-list-holder-inner").isotope({
                            filter: "*"
                        })
                    }(n), a || (a = !0, function(e) {
                        var t = {
                            action: "mkdf_tours_list_ajax_pagination",
                            fields: d.find("input").serialize()
                        };
                        u.ajax({
                            url: mkdfToursAjaxURL,
                            data: t,
                            dataType: "json",
                            type: "POST",
                            success: function(t) {
                                t.havePosts && d.find('[name="next_page"]').val(t.nextPage), l() && mkdf.modules.common.mkdfInitParallax(), e.call(this, t)
                            }
                        })
                    }(function(t) {
                        if (!0 === t.havePosts) {
                            o.text(i);
                            var e = u(t.html);
                            s.append(e), s.waitForImages(function() {
                                f(s), s.isotope("appended", e).isotope("reloadItems"), mkdf.modules.tours.mkdfToursGalleryAnimation()
                            })
                        } else o.remove(), r.html(t.message);
                        a = !1
                    }))
            })
        }
        var e = u(".mkdf-tours-list-holder"),
            f = function(t) {
                if (t.parent().hasClass("mkdf-tours-type-masonry")) {
                    var e = parseInt(t.find(".mkdf-tours-row-item").css("padding-left")),
                        i = t.find(".mkdf-size-default"),
                        n = t.find(".mkdf-size-large-width"),
                        o = t.find(".mkdf-size-large-height"),
                        r = t.find(".mkdf-size-large-width-height"),
                        a = t.find(".mkdf-tours-list-grid-sizer").width();
                    680 < mkdf.windowWidth ? (i.css("height", a - 2 * e), o.css("height", Math.round(2 * a) - 2 * e), r.css("height", Math.round(2 * a) - 2 * e), n.css("height", a - 2 * e)) : (i.css("height", a), o.css("height", a), r.css("height", a), n.css("height", Math.round(a / 2)))
                }
            };
        return {
            init: function() {
                e.length && void 0 !== u.fn.isotope && e.each(function() {
                    ! function(t) {
                        t.animate({
                            opacity: 1
                        }), f(t), t.isotope({
                            percentPosition: !0,
                            itemSelector: ".mkdf-tours-row-item",
                            transitionDuration: "0.4s",
                            isInitLayout: !0,
                            hiddenStyle: {
                                opacity: 0
                            },
                            visibleStyle: {
                                opacity: 1
                            },
                            layoutMode: "packery",
                            packery: {
                                columnWidth: ".mkdf-tours-list-grid-sizer"
                            }
                        }), l() && mkdf.modules.common.mkdfInitParallax(), u(window).resize(function() {
                            f(t)
                        })
                    }(u(this).find(".mkdf-tours-list-holder-inner")),
                    function(n) {
                        var o = n.find(".mkdf-tour-list-filter-item");
                        o.on("click", function(t) {
                            t.preventDefault(), t.stopPropagation();
                            var e = u(this),
                                i = e.data("type");
                            o.removeClass("mkdf-tour-list-current-filter"), e.addClass("mkdf-tour-list-current-filter"), i = void 0 === i ? "*" : "." + i, n.find(".mkdf-tours-list-holder-inner").isotope({
                                filter: i
                            })
                        })
                    }(u(this)), t(u(this))
                })
            }
        }
    }
    "undefined" != typeof mkdf && (mkdf.modules.toursListSC = t), t.mkdfOnWindowLoad = e, t.toursList = i, u(window).on("load", e)
}(jQuery);